package ro.redeul.katas.runningAverage;import java.io.*;import java.util.function.BiFunction;class RunningAverage {    Rational value;    int count;    public RunningAverage() {        this(Rational.ZERO, 0);    }    public RunningAverage(Rational value, int count) {        this.value = value;        this.count = count;    }    public static RunningAverage update(int n, RunningAverage a) {        Rational val = a.value.mul(a.count - 1).add(n).div(n).simplify();        int cnt = n + 1;        return new RunningAverage(val, cnt);    }}public class LineSizeRunningAverage {    public double count(File root) {        File files[] = root.listFiles();        if (files == null)            return 0;        RunningAverage avg = new RunningAverage();        for (File file : files) {            avg = iterateLines(file, avg, RunningAverage::update);        }        return avg.value.asDouble();    }    private RunningAverage iterateLines(File file,                                        RunningAverage avg,                                        BiFunction<Integer, RunningAverage, RunningAverage> updater) {        BufferedReader reader = null;        try {            reader = new BufferedReader(new FileReader(file));            String line = null;            while ((line = reader.readLine()) != null)                avg = updater.apply(line.length(), avg);        } catch (Exception e) {            // log and complain moderately loud        } finally {            if (reader != null)                try {                    reader.close();                } catch (IOException e) {                    e.printStackTrace();                }        }        return avg;    }}